openapi: 3.0.3
info:
  title: Split
  description: An easy way to split expenses
  version: 1.0.0

paths:
  /user/register:
    post:
      operationId: Register-User
      summary: Create a new user
      description: Creates a new user with the parameters supplied in the request body. The users ID is unique.
      tags:
        - users
      requestBody:
        description: "Duplicate Usernames are not allowed."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterRequest"
      responses:
        "201":
          description: The Server successfully created the requested User. Returns the id of the newly created User.
          content:
            text/plain:
              schema:
                type: string
                example: "62edecc3-8d2b-4bae-8e2d-ee19398235fa"

        "400":
          description: Username already in use.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Something went wrong.

  /user/login:
    post:
      operationId: Login-User
      summary: Login a User
      description: Logs the User in by setting a JWT-Token in the cookie storage on success.
      tags:
        - users
      requestBody:
        description: "Some description"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        "200":
          description: "User login successful"
        "404":
          description: "Not found"
        "500":
          description: "Something went wrong internally"
        "401":
          description: "Unauthorized"

components:
  schemas:
    UserRegisterRequest:
      type: object
      description: The request body to create a user.
      required: [name, password, payment_description]
      properties:
        name:
          type: string
          example: JohnDoe
          minLength: 1
        password:
          type: string
          example: "password123"
          minLength: 6
        payment_description:
          type: string
          example: "Link to PayPal"
      example:
        {
          name: "JohnDoe",
          password: "password123",
          payment_description: "Link to Paypal",
        }

    UserLoginRequest:
      type: object
      description: The request body to login a user.
      required: [name, password]
      properties:
        name:
          type: string
          example: John Doe
          minLength: 1
        password:
          type: string
          example: "password123"
          minLength: 6
      example: { name: "JohnDoe", password: "password123" }

    ErrorResponse:
      type: object
      description: Default error response object. The given String never exposes internal infrastructure and can be shown to the client.
      required: [reason]
      properties:
        reason:
          type: string
          example: Username already in use
      example: { reason: "Username already in use" }

tags:
  - name: users
    description: "Everything about users"
